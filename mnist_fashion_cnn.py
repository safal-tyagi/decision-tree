# -*- coding: utf-8 -*-
"""mnist-fashion-CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMu-jUjbOc-ruGPBhgM7XoRKT8y0jHSe
"""

import tensorflow as tf
import matplotlib.pyplot as plt

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("FashionMNIST", source_url='http://fashion-mnist.s3-website.eu-central-1.amazonaws.com/', one_hot = True)

def init_weights(shape) :
    init_random_dist = tf.truncated_normal(shape, stddev = 0.1)
    return tf.Variable(init_random_dist)

def init_biases(shape) :
    init_bias_vals = tf.constant(0.1, shape=shape)
    return tf.Variable(init_bias_vals)

def conv3d(x, w):
    '''
    x: [batch, H, W, channels]
    w: [filter H, filter W, channel IN, channel OUT]
    '''
    return tf.nn.conv2d(x, w, strides=[1,1,1,1], padding='SAME')

def max_pool_2by2(x):
    '''
    x: [batch, H, W , channels], a 4D tensor
    '''
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1,2,2,1], padding='SAME')

def conv_layer(input_x, shape):
    w = init_weights(shape)
    b = init_biases([shape[3]])
    return tf.nn.relu(conv3d(input_x, w) + b)

def normal_full_layer(input_layer, size):
    input_size = int(input_layer.get_shape()[1])
    w = init_weights([input_size, size])
    b = init_biases([size])
    return tf.matmul(input_layer, w) + b

# Placeholders
n_inputs = 784
n_classes = 10
x = tf.placeholder("float", [None, n_inputs])
y = tf.placeholder("float", [None, n_classes])

x_image = tf.reshape(x, [-1, 28, 28, 1])

# layer 1
conv1 = conv_layer(x_image, shape=[5, 5, 1, 32])
conv1pool = max_pool_2by2(conv1)

# layer 2
conv2 = conv_layer(conv1pool, shape=[5, 5, 32, 64])
conv2pool = max_pool_2by2(conv2)

# final layer flatten
conv2flat = tf.reshape(conv2pool, [-1, 7*7*64])
flatlayer = tf.nn.relu(normal_full_layer(conv2flat, 1064))

#dropout
hold_prob = tf.placeholder(tf.float32)
drop = tf.nn.dropout(flatlayer, keep_prob=hold_prob)

# y_pred
y_pred = normal_full_layer(drop, 10)

cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=y_pred))

# optimizer
optimizer = tf.train.AdamOptimizer(learning_rate=0.0001)
train = optimizer.minimize(cross_entropy)

#init
init = tf.global_variables_initializer()

steps = 50000
sess = tf.Session()
sess.run(init)

for i in range(steps):
    batch_x, batch_y = mnist.train.next_batch(100)
    
    sess.run(train, feed_dict={x:batch_x, y:batch_y, hold_prob:0.5})
    
    if i%100 == 0:
        print(i)
        # test model
        matches = tf.equal(tf.argmax(y_pred, 1), tf.argmax(y, 1))
        acc = tf.reduce_mean(tf.cast(matches, tf.float32))
        print(sess.run(acc, feed_dict={x:mnist.test.images, y:mnist.test.labels, hold_prob:1.0}))